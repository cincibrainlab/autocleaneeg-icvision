# GitHub Actions workflow for ICVision CI

name: ICVision CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Run tox -e py
      run: tox -e py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_DUMMY }} # Use a dummy key for CI tests

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Optional: if you use Codecov
        fail_ci_if_error: true
        # files: ./coverage.xml # tox should generate coverage.xml in the root
        # flags: unittests
        # name: codecov-umbrella
        # yml: ./codecov.yml # Optional: if you have a codecov.yml

  lint:
    runs-on: ubuntu-latest # Linters usually run fine on a single OS
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python for linting
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Match testenv:lint basepython in tox.ini

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Run tox -e lint
      run: tox -e lint

# Optional: Job to build and publish to PyPI upon creating a new tag (release)
# publish:
#   needs: [test, lint] # Ensure tests and linting pass before publishing
#   runs-on: ubuntu-latest
#   if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags (e.g., v0.1.0)
#   steps:
#   - name: Checkout repository
#     uses: actions/checkout@v4
#
#   - name: Set up Python
#     uses: actions/setup-python@v5
#     with:
#       python-version: '3.11'
#
#   - name: Install build dependencies
#     run: |
#       python -m pip install --upgrade pip
#       pip install build twine
#
#   - name: Build package
#     run: python -m build
#
#   - name: Publish to PyPI
#     env:
#       TWINE_USERNAME: __token__
#       TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#     run: twine upload dist/* 